-	vrais doublons (NDA1 <> NDA2 and UMA1 = UMA2 and DateE1 = DateE2 and DateS1 = DateS2) ;
-	autres doublons 0 nuit (NDA1 <> NDA2 and UMA1 <> UMA2 and DateE1 = DateE2 and DateS1 = DateS2) ;
-	séjours en chevauchement ou en inclusion (NDA1 <> NDA2 and UMA1 <> UMA2 and DateS1 between DE1+1 et Dates2) ;
-	séjours contigus (NDA1 <> NDA2 and UMA1 <> UMA2 and Dates1 = DateE2).


SET SERVEROUTPUT ON
DECLARE
    v_sql VARCHAR2(4000);
    v_count NUMBER;
BEGIN
    FOR col IN (
        SELECT COLUMN_NAME
        FROM ALL_TAB_COLUMNS
        WHERE TABLE_NAME = 'SDO'
          AND DATA_TYPE IN ('VARCHAR2','CHAR')
    ) LOOP
        v_sql := 'SELECT COUNT(*) FROM SDO WHERE ' || col.COLUMN_NAME || ' = ''CODE''';
        EXECUTE IMMEDIATE v_sql INTO v_count;
        IF v_count > 0 THEN
            DBMS_OUTPUT.PUT_LINE('Colonne : ' || col.COLUMN_NAME || ' contient ''CODE'' (' || v_count || ' occurrence(s))');
        END IF;
    END LOOP;
END;
/

def load_data(csv_file):
    # colonnes attendues (ordre renvoyé par ta requête)
    cols = ["UNIT", "ANNEE", "NB_RUM", "NB_RUM_SUPPL",
            "NB_JOURNEES", "NB_JOURNEES_SUPPL",
            "%_RUM_SUPPL", "%_JOURNEES_SUPPL"]

    # lecture (header=None car SQL*Plus peut écrire les en-têtes ou non)
    df = pd.read_csv(csv_file, sep=";", engine="python", names=cols, header=None, encoding="cp1252", dtype=str)

    # enlever lignes complètement vides
    df = df.dropna(how="all")

    # nettoyer UNIT et supprimer lignes sans UNIT
    df["UNIT"] = df["UNIT"].astype(str).str.strip()
    df = df[df["UNIT"].notna() & (df["UNIT"] != "")]

    # ----- ANNEE : convertir proprement et supprimer les lignes invalides -----
    # parfois ANNEE peut contenir des entêtes ou du texte -> on force numeric
    df["ANNEE"] = pd.to_numeric(df["ANNEE"].str.extract(r'(\d{4})', expand=False), errors="coerce")
    # supprimer lignes sans année reconnue
    df = df[df["ANNEE"].notna()].copy()
    df["ANNEE"] = df["ANNEE"].astype(int)

    # ----- Colonnes entières : forcer la conversion (NaN -> 0) -----
    int_cols = ["NB_RUM", "NB_RUM_SUPPL", "NB_JOURNEES", "NB_JOURNEES_SUPPL"]
    for c in int_cols:
        if c in df.columns:
            df[c] = pd.to_numeric(df[c].str.replace(",", ".").str.strip(), errors="coerce").fillna(0).astype(int)

    # ----- Colonnes pourcentages : virgule -> point, to_numeric, NaN -> 0.0 -----
    pct_cols = ["%_RUM_SUPPL", "%_JOURNEES_SUPPL"]
    for c in pct_cols:
        if c in df.columns:
            df[c] = pd.to_numeric(df[c].astype(str).str.replace(",", ".").str.replace("%","").str.strip(),
                                  errors="coerce").fillna(0.0).astype(float)

    # trier proprement
    df = df.sort_values(["UNIT", "ANNEE"]).reset_index(drop=True)
    return df
