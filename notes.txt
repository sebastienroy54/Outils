def afficher_tableau(df, annee1, annee2):

    um_names = {
        "103": "Réa CHIR",
        "104": "USC",
        "021": "SI Cardiologie",
        "340": "Med Intensive Rea",
        "341": "USIP MIR",
        "451": "SI Hématologie",
        "091": "Réa Néonat",
        "092": "SI Néonat"
    }

    st.markdown("""
    <style>
    .block-container {
                max-width : 95% !important;
    }
    .table-grouped {                
                width : 100% !important;
                margin-left: auto;
                margin-right: auto;
    }
    </style>
    """, unsafe_allow_html=True)

    df["UNIT_NOM"] = df["UNIT"].map(um_names).fillna(df["UNIT"])

    units = sorted(df['UNIT'].unique())
    rows = []

    for unit in units:
        d1 = df[(df['UNIT'] == unit) & (df['ANNEE'] == annee1)]
        d2 = df[(df['UNIT'] == unit) & (df['ANNEE'] == annee2)]

        d1 = d1.iloc[0] if not d1.empty else None
        d2 = d2.iloc[0] if not d2.empty else None

        nb_rum1 = d1['NB_RUM'] if d1 is not None else 0
        nb_rum_sup1 = d1['NB_RUM_SUPPL'] if d1 is not None else 0
        pct_rum1 = d1['%_RUM_SUPPL'] if d1 is not None else 0
        nb_journees1 = d1['NB_JOURNEES'] if d1 is not None else 0
        nb_journees_sup1 = d1['NB_JOURNEES_SUPPL'] if d1 is not None else 0
        pct_journees1 = d1['%_JOURNEES_SUPPL'] if d1 is not None else 0

        nb_rum2 = d2['NB_RUM'] if d2 is not None else 0
        nb_rum_sup2 = d2['NB_RUM_SUPPL'] if d2 is not None else 0
        pct_rum2 = d2['%_RUM_SUPPL'] if d2 is not None else 0
        nb_journees2 = d2['NB_JOURNEES'] if d2 is not None else 0
        nb_journees_sup2 = d2['NB_JOURNEES_SUPPL'] if d2 is not None else 0
        pct_journees2 = d2['%_JOURNEES_SUPPL'] if d2 is not None else 0

        evol_rum = round(pct_rum2 - pct_rum1, 1)
        evol_journees = round(pct_journees2 - pct_journees1, 1)

        unit_nom = f"UM {unit} - {d1['UNIT_NOM'] if d1 is not None else (d2['UNIT_NOM'] if d2 is not None else unit)}"

        rows.append(
        f'<tr>'
        f'<td class="group-border-right">{unit_nom}</td>'
        f'<td>{nb_rum1}</td><td>{nb_rum_sup1}</td><td class="group-border-right">{pct_rum1}%</td>'
        f'<td>{nb_journees1}</td><td class="group-border-right">{nb_journees_sup1}</td>'
        f'<td>{nb_rum2}</td><td>{nb_rum_sup2}</td><td class="group-border-right">{pct_rum2}%</td>'
        f'<td>{nb_journees2}</td><td class="group-border-right">{nb_journees_sup2}</td>'
        f'<td>{'+' if evol_rum > 0 else ''}{evol_rum}%</td>'
        f'<td>{'+' if evol_journees > 0 else ''}{evol_journees}%</td>'
        f'</tr>'
        )

    tableau_html = f"""
    <h2>Évolution {annee1} vs {annee2}</h2>
    <table class="table-grouped">
        <thead>
        <tr>
          <th rowspan="2" class="group-border-right th-unit">Unité médicale</th>
          <th colspan="3" class="group-border-right th-rum">{annee1} RUM</th>
          <th colspan="2" class="group-border-right th-jours">{annee1} Journées</th>
          <th colspan="3" class="group-border-right th-rum">{annee2} RUM</th>
          <th colspan="2" class="group-border-right th-jours">{annee2} Journées</th>
          <th colspan="2" class="th-evol">Évolution</th>
        </tr>
        <tr>
          <th class="th-rum">Nb RUM</th><th class="th-rum">Nb RUM sup</th><th class="th-rum group-border-right">% RUM</th>
          <th class="th-jours">Nb journées</th><th class="th-jours group-border-right">Nb journées sup</th>
          <th class="th-rum">Nb RUM</th><th class="th-rum">Nb RUM sup</th><th class="th-rum group-border-right">% RUM</th>
          <th class="th-jours">Nb journées</th><th class="th-jours group-border-right">Nb journées sup</th>
          <th class="th-evol">% RUM</th><th class="th-evol">% Journées</th>
        </tr>
      </thead>
      <tbody>
        {''.join(rows)}
      </tbody>
    </table>
    """
    st.markdown(tableau_html, unsafe_allow_html=True)


def load_data(csv_file):
    cols = ["UNIT", "ANNEE", "NB_RUM", "NB_RUM_SUPPL", "NB_JOURNEES", "NB_JOURNEES_SUPPL", "%_RUM_SUPPL", "%_JOURNEES_SUPPL"]

    df = pd.read_csv(csv_file, sep=";", engine='python', names=cols, header=None, encoding="cp1252")
    df = df.dropna(subset=["UNIT"])

    df["ANNEE"] = df["ANNEE"].astype(int)
    df["UNIT"] = df["UNIT"].astype(str).str.strip()
    numeric_cols = ["NB_RUM", "NB_RUM_SUPPL", "NB_JOURNEES", "NB_JOURNEES_SUPPL"]
    for col in numeric_cols:
        df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0).astype(int)

    df["%_RUM_SUPPL"] = round(df["NB_RUM_SUPPL"] / df["NB_RUM"] * 100, 1).fillna(0)
    df["%_JOURNEES_SUPPL"] = round(df["NB_JOURNEES_SUPPL"] / df["NB_JOURNEES"] * 100, 1).fillna(0)

    df = df.sort_values("UNIT").reset_index(drop=True)

    return df
